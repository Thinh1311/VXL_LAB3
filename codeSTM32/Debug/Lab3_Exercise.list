
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800308c  0800308c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800308c  0800308c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800308c  0800308c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08003094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000058  080030ec  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080030ec  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009786  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  00029807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ed9  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c16d  00000000  00000000  00043639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f4  00000000  00000000  0004f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  000d1cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003050 	.word	0x08003050

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003050 	.word	0x08003050

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS] = {NORMAL_STATE};
int KeyReg3[NUM_BUTTONS] = {NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <subKeyProcess>:
void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:
void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a1      	b.n	80002f0 <getKeyInput+0x150>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a55      	ldr	r2, [pc, #340]	; (8000304 <getKeyInput+0x164>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4954      	ldr	r1, [pc, #336]	; (8000308 <getKeyInput+0x168>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a53      	ldr	r2, [pc, #332]	; (800030c <getKeyInput+0x16c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	494f      	ldr	r1, [pc, #316]	; (8000304 <getKeyInput+0x164>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10b      	bne.n	80001ea <getKeyInput+0x4a>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	484e      	ldr	r0, [pc, #312]	; (8000310 <getKeyInput+0x170>)
 80001d8:	f001 ff0e 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a4a      	ldr	r2, [pc, #296]	; (800030c <getKeyInput+0x16c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e8:	e01c      	b.n	8000224 <getKeyInput+0x84>
		}
		else if (i == 1){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d10b      	bne.n	8000208 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f4:	4846      	ldr	r0, [pc, #280]	; (8000310 <getKeyInput+0x170>)
 80001f6:	f001 feff 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a43      	ldr	r2, [pc, #268]	; (800030c <getKeyInput+0x16c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000206:	e00d      	b.n	8000224 <getKeyInput+0x84>
		}
		else if (i == 2){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b02      	cmp	r3, #2
 800020c:	d10a      	bne.n	8000224 <getKeyInput+0x84>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 800020e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000212:	483f      	ldr	r0, [pc, #252]	; (8000310 <getKeyInput+0x170>)
 8000214:	f001 fef0 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000224:	4a37      	ldr	r2, [pc, #220]	; (8000304 <getKeyInput+0x164>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4936      	ldr	r1, [pc, #216]	; (8000308 <getKeyInput+0x168>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d151      	bne.n	80002dc <getKeyInput+0x13c>
 8000238:	4a32      	ldr	r2, [pc, #200]	; (8000304 <getKeyInput+0x164>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4932      	ldr	r1, [pc, #200]	; (800030c <getKeyInput+0x16c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d147      	bne.n	80002dc <getKeyInput+0x13c>
			if (KeyReg3[i] != KeyReg2[i]){
 800024c:	4a31      	ldr	r2, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	492d      	ldr	r1, [pc, #180]	; (800030c <getKeyInput+0x16c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d023      	beq.n	80002a8 <getKeyInput+0x108>
				KeyReg3[i] = KeyReg2[i];
 8000260:	4a2a      	ldr	r2, [pc, #168]	; (800030c <getKeyInput+0x16c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	492a      	ldr	r1, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <getKeyInput+0x16c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d135      	bne.n	80002e8 <getKeyInput+0x148>
					subKeyProcess(i);	// Kich timer_flag[i] = 1;
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f7ff ff7f 	bl	8000180 <subKeyProcess>
					if (buttonLongPress_flag[i] == 0) {
 8000282:	4a25      	ldr	r2, [pc, #148]	; (8000318 <getKeyInput+0x178>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d106      	bne.n	800029c <getKeyInput+0xfc>
						TimeOutForKeyPress[i] = 2000; // Set thoi gian 2s (dieu kien cho su kien longkeyPress dien ra)
 800028e:	4a23      	ldr	r2, [pc, #140]	; (800031c <getKeyInput+0x17c>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029a:	e025      	b.n	80002e8 <getKeyInput+0x148>
					}
					else {
						TimeOutForKeyPress[i] = 250;  // Set thoi gian 0.25s (dieu kien cho nhung lan thay doi trang thai tiep theo)
 800029c:	4a1f      	ldr	r2, [pc, #124]	; (800031c <getKeyInput+0x17c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	21fa      	movs	r1, #250	; 0xfa
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002a6:	e01f      	b.n	80002e8 <getKeyInput+0x148>
					}
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <getKeyInput+0x17c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	1e5a      	subs	r2, r3, #1
 80002b2:	491a      	ldr	r1, [pc, #104]	; (800031c <getKeyInput+0x17c>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				// Neu sau khoang thoi gian TimeOutForKeyPress lan dau tien (2s) ma van con nhan giu button, thi buttonlong_flag[i] se bang 1, nguoc lai se bang 0
				if (TimeOutForKeyPress[i] == 0){
 80002ba:	4a18      	ldr	r2, [pc, #96]	; (800031c <getKeyInput+0x17c>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d110      	bne.n	80002e8 <getKeyInput+0x148>
					KeyReg3[i] = NORMAL_STATE;
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <getKeyInput+0x174>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2101      	movs	r1, #1
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonLongPress_flag[i] = 1;
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <getKeyInput+0x178>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002da:	e005      	b.n	80002e8 <getKeyInput+0x148>
				}
			}
		}
		else{
			buttonLongPress_flag[i] = 0;
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <getKeyInput+0x178>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2100      	movs	r1, #0
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e6:	e000      	b.n	80002ea <getKeyInput+0x14a>
			if (KeyReg3[i] != KeyReg2[i]){
 80002e8:	bf00      	nop
	for (int i = 0; i < NUM_BUTTONS; i++){
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	f77f af5a 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000000c 	.word	0x2000000c
 8000308:	20000000 	.word	0x20000000
 800030c:	20000018 	.word	0x20000018
 8000310:	40010c00 	.word	0x40010c00
 8000314:	20000024 	.word	0x20000024
 8000318:	20000080 	.word	0x20000080
 800031c:	2000008c 	.word	0x2000008c

08000320 <display7SEG>:
 */


#include "display7SEG.h"

void display7SEG(int num){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b09      	cmp	r3, #9
 800032c:	f200 8180 	bhi.w	8000630 <display7SEG+0x310>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <display7SEG+0x18>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000361 	.word	0x08000361
 800033c:	080003a9 	.word	0x080003a9
 8000340:	080003f1 	.word	0x080003f1
 8000344:	08000439 	.word	0x08000439
 8000348:	08000481 	.word	0x08000481
 800034c:	080004c9 	.word	0x080004c9
 8000350:	08000511 	.word	0x08000511
 8000354:	08000559 	.word	0x08000559
 8000358:	080005a1 	.word	0x080005a1
 800035c:	080005e9 	.word	0x080005e9
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	48c6      	ldr	r0, [pc, #792]	; (8000680 <display7SEG+0x360>)
 8000366:	f001 fe5e 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	48c4      	ldr	r0, [pc, #784]	; (8000680 <display7SEG+0x360>)
 8000370:	f001 fe59 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2104      	movs	r1, #4
 8000378:	48c1      	ldr	r0, [pc, #772]	; (8000680 <display7SEG+0x360>)
 800037a:	f001 fe54 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2108      	movs	r1, #8
 8000382:	48bf      	ldr	r0, [pc, #764]	; (8000680 <display7SEG+0x360>)
 8000384:	f001 fe4f 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2110      	movs	r1, #16
 800038c:	48bc      	ldr	r0, [pc, #752]	; (8000680 <display7SEG+0x360>)
 800038e:	f001 fe4a 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	48ba      	ldr	r0, [pc, #744]	; (8000680 <display7SEG+0x360>)
 8000398:	f001 fe45 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	48b7      	ldr	r0, [pc, #732]	; (8000680 <display7SEG+0x360>)
 80003a2:	f001 fe40 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 80003a6:	e167      	b.n	8000678 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	48b4      	ldr	r0, [pc, #720]	; (8000680 <display7SEG+0x360>)
 80003ae:	f001 fe3a 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	48b2      	ldr	r0, [pc, #712]	; (8000680 <display7SEG+0x360>)
 80003b8:	f001 fe35 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2104      	movs	r1, #4
 80003c0:	48af      	ldr	r0, [pc, #700]	; (8000680 <display7SEG+0x360>)
 80003c2:	f001 fe30 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2108      	movs	r1, #8
 80003ca:	48ad      	ldr	r0, [pc, #692]	; (8000680 <display7SEG+0x360>)
 80003cc:	f001 fe2b 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2110      	movs	r1, #16
 80003d4:	48aa      	ldr	r0, [pc, #680]	; (8000680 <display7SEG+0x360>)
 80003d6:	f001 fe26 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2120      	movs	r1, #32
 80003de:	48a8      	ldr	r0, [pc, #672]	; (8000680 <display7SEG+0x360>)
 80003e0:	f001 fe21 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2140      	movs	r1, #64	; 0x40
 80003e8:	48a5      	ldr	r0, [pc, #660]	; (8000680 <display7SEG+0x360>)
 80003ea:	f001 fe1c 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 80003ee:	e143      	b.n	8000678 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	48a2      	ldr	r0, [pc, #648]	; (8000680 <display7SEG+0x360>)
 80003f6:	f001 fe16 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	48a0      	ldr	r0, [pc, #640]	; (8000680 <display7SEG+0x360>)
 8000400:	f001 fe11 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2104      	movs	r1, #4
 8000408:	489d      	ldr	r0, [pc, #628]	; (8000680 <display7SEG+0x360>)
 800040a:	f001 fe0c 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	489b      	ldr	r0, [pc, #620]	; (8000680 <display7SEG+0x360>)
 8000414:	f001 fe07 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2110      	movs	r1, #16
 800041c:	4898      	ldr	r0, [pc, #608]	; (8000680 <display7SEG+0x360>)
 800041e:	f001 fe02 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	4896      	ldr	r0, [pc, #600]	; (8000680 <display7SEG+0x360>)
 8000428:	f001 fdfd 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4893      	ldr	r0, [pc, #588]	; (8000680 <display7SEG+0x360>)
 8000432:	f001 fdf8 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 8000436:	e11f      	b.n	8000678 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	4890      	ldr	r0, [pc, #576]	; (8000680 <display7SEG+0x360>)
 800043e:	f001 fdf2 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2102      	movs	r1, #2
 8000446:	488e      	ldr	r0, [pc, #568]	; (8000680 <display7SEG+0x360>)
 8000448:	f001 fded 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2104      	movs	r1, #4
 8000450:	488b      	ldr	r0, [pc, #556]	; (8000680 <display7SEG+0x360>)
 8000452:	f001 fde8 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2108      	movs	r1, #8
 800045a:	4889      	ldr	r0, [pc, #548]	; (8000680 <display7SEG+0x360>)
 800045c:	f001 fde3 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2110      	movs	r1, #16
 8000464:	4886      	ldr	r0, [pc, #536]	; (8000680 <display7SEG+0x360>)
 8000466:	f001 fdde 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2120      	movs	r1, #32
 800046e:	4884      	ldr	r0, [pc, #528]	; (8000680 <display7SEG+0x360>)
 8000470:	f001 fdd9 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4881      	ldr	r0, [pc, #516]	; (8000680 <display7SEG+0x360>)
 800047a:	f001 fdd4 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 800047e:	e0fb      	b.n	8000678 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2101      	movs	r1, #1
 8000484:	487e      	ldr	r0, [pc, #504]	; (8000680 <display7SEG+0x360>)
 8000486:	f001 fdce 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	487c      	ldr	r0, [pc, #496]	; (8000680 <display7SEG+0x360>)
 8000490:	f001 fdc9 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	4879      	ldr	r0, [pc, #484]	; (8000680 <display7SEG+0x360>)
 800049a:	f001 fdc4 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2108      	movs	r1, #8
 80004a2:	4877      	ldr	r0, [pc, #476]	; (8000680 <display7SEG+0x360>)
 80004a4:	f001 fdbf 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2110      	movs	r1, #16
 80004ac:	4874      	ldr	r0, [pc, #464]	; (8000680 <display7SEG+0x360>)
 80004ae:	f001 fdba 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	4872      	ldr	r0, [pc, #456]	; (8000680 <display7SEG+0x360>)
 80004b8:	f001 fdb5 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	486f      	ldr	r0, [pc, #444]	; (8000680 <display7SEG+0x360>)
 80004c2:	f001 fdb0 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 80004c6:	e0d7      	b.n	8000678 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	486c      	ldr	r0, [pc, #432]	; (8000680 <display7SEG+0x360>)
 80004ce:	f001 fdaa 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2102      	movs	r1, #2
 80004d6:	486a      	ldr	r0, [pc, #424]	; (8000680 <display7SEG+0x360>)
 80004d8:	f001 fda5 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	4867      	ldr	r0, [pc, #412]	; (8000680 <display7SEG+0x360>)
 80004e2:	f001 fda0 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	4865      	ldr	r0, [pc, #404]	; (8000680 <display7SEG+0x360>)
 80004ec:	f001 fd9b 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4862      	ldr	r0, [pc, #392]	; (8000680 <display7SEG+0x360>)
 80004f6:	f001 fd96 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4860      	ldr	r0, [pc, #384]	; (8000680 <display7SEG+0x360>)
 8000500:	f001 fd91 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	485d      	ldr	r0, [pc, #372]	; (8000680 <display7SEG+0x360>)
 800050a:	f001 fd8c 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 800050e:	e0b3      	b.n	8000678 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2101      	movs	r1, #1
 8000514:	485a      	ldr	r0, [pc, #360]	; (8000680 <display7SEG+0x360>)
 8000516:	f001 fd86 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2102      	movs	r1, #2
 800051e:	4858      	ldr	r0, [pc, #352]	; (8000680 <display7SEG+0x360>)
 8000520:	f001 fd81 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	4855      	ldr	r0, [pc, #340]	; (8000680 <display7SEG+0x360>)
 800052a:	f001 fd7c 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	4853      	ldr	r0, [pc, #332]	; (8000680 <display7SEG+0x360>)
 8000534:	f001 fd77 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2110      	movs	r1, #16
 800053c:	4850      	ldr	r0, [pc, #320]	; (8000680 <display7SEG+0x360>)
 800053e:	f001 fd72 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	484e      	ldr	r0, [pc, #312]	; (8000680 <display7SEG+0x360>)
 8000548:	f001 fd6d 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	484b      	ldr	r0, [pc, #300]	; (8000680 <display7SEG+0x360>)
 8000552:	f001 fd68 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 8000556:	e08f      	b.n	8000678 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	4848      	ldr	r0, [pc, #288]	; (8000680 <display7SEG+0x360>)
 800055e:	f001 fd62 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2102      	movs	r1, #2
 8000566:	4846      	ldr	r0, [pc, #280]	; (8000680 <display7SEG+0x360>)
 8000568:	f001 fd5d 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2104      	movs	r1, #4
 8000570:	4843      	ldr	r0, [pc, #268]	; (8000680 <display7SEG+0x360>)
 8000572:	f001 fd58 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2108      	movs	r1, #8
 800057a:	4841      	ldr	r0, [pc, #260]	; (8000680 <display7SEG+0x360>)
 800057c:	f001 fd53 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2110      	movs	r1, #16
 8000584:	483e      	ldr	r0, [pc, #248]	; (8000680 <display7SEG+0x360>)
 8000586:	f001 fd4e 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2120      	movs	r1, #32
 800058e:	483c      	ldr	r0, [pc, #240]	; (8000680 <display7SEG+0x360>)
 8000590:	f001 fd49 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	4839      	ldr	r0, [pc, #228]	; (8000680 <display7SEG+0x360>)
 800059a:	f001 fd44 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 800059e:	e06b      	b.n	8000678 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	4836      	ldr	r0, [pc, #216]	; (8000680 <display7SEG+0x360>)
 80005a6:	f001 fd3e 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2102      	movs	r1, #2
 80005ae:	4834      	ldr	r0, [pc, #208]	; (8000680 <display7SEG+0x360>)
 80005b0:	f001 fd39 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	4831      	ldr	r0, [pc, #196]	; (8000680 <display7SEG+0x360>)
 80005ba:	f001 fd34 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2108      	movs	r1, #8
 80005c2:	482f      	ldr	r0, [pc, #188]	; (8000680 <display7SEG+0x360>)
 80005c4:	f001 fd2f 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	482c      	ldr	r0, [pc, #176]	; (8000680 <display7SEG+0x360>)
 80005ce:	f001 fd2a 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	482a      	ldr	r0, [pc, #168]	; (8000680 <display7SEG+0x360>)
 80005d8:	f001 fd25 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	4827      	ldr	r0, [pc, #156]	; (8000680 <display7SEG+0x360>)
 80005e2:	f001 fd20 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 80005e6:	e047      	b.n	8000678 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	4824      	ldr	r0, [pc, #144]	; (8000680 <display7SEG+0x360>)
 80005ee:	f001 fd1a 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2102      	movs	r1, #2
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <display7SEG+0x360>)
 80005f8:	f001 fd15 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	481f      	ldr	r0, [pc, #124]	; (8000680 <display7SEG+0x360>)
 8000602:	f001 fd10 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	481d      	ldr	r0, [pc, #116]	; (8000680 <display7SEG+0x360>)
 800060c:	f001 fd0b 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <display7SEG+0x360>)
 8000616:	f001 fd06 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	4818      	ldr	r0, [pc, #96]	; (8000680 <display7SEG+0x360>)
 8000620:	f001 fd01 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <display7SEG+0x360>)
 800062a:	f001 fcfc 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 800062e:	e023      	b.n	8000678 <display7SEG+0x358>
	default:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <display7SEG+0x360>)
 8000636:	f001 fcf6 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2102      	movs	r1, #2
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <display7SEG+0x360>)
 8000640:	f001 fcf1 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <display7SEG+0x360>)
 800064a:	f001 fcec 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2108      	movs	r1, #8
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <display7SEG+0x360>)
 8000654:	f001 fce7 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <display7SEG+0x360>)
 800065e:	f001 fce2 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2120      	movs	r1, #32
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <display7SEG+0x360>)
 8000668:	f001 fcdd 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <display7SEG+0x360>)
 8000672:	f001 fcd8 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 8000676:	bf00      	nop
	}
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010c00 	.word	0x40010c00

08000684 <update7SEG>:

int index_led = 0;
int led_buffer[4];
void update7SEG(int index){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d87a      	bhi.n	8000788 <update7SEG+0x104>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <update7SEG+0x14>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006e1 	.word	0x080006e1
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000751 	.word	0x08000751
	switch(index){
	case 0:
		display7SEG(led_buffer[0]);
 80006a8:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <update7SEG+0x110>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe37 	bl	8000320 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <update7SEG+0x114>)
 80006b8:	f001 fcb5 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4835      	ldr	r0, [pc, #212]	; (8000798 <update7SEG+0x114>)
 80006c2:	f001 fcb0 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	4832      	ldr	r0, [pc, #200]	; (8000798 <update7SEG+0x114>)
 80006ce:	f001 fcaa 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	482f      	ldr	r0, [pc, #188]	; (8000798 <update7SEG+0x114>)
 80006da:	f001 fca4 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 80006de:	e054      	b.n	800078a <update7SEG+0x106>
	case 1:
		display7SEG(led_buffer[1]);
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <update7SEG+0x110>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fe1b 	bl	8000320 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	482a      	ldr	r0, [pc, #168]	; (8000798 <update7SEG+0x114>)
 80006f0:	f001 fc99 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <update7SEG+0x114>)
 80006fa:	f001 fc94 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4824      	ldr	r0, [pc, #144]	; (8000798 <update7SEG+0x114>)
 8000706:	f001 fc8e 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	4821      	ldr	r0, [pc, #132]	; (8000798 <update7SEG+0x114>)
 8000712:	f001 fc88 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 8000716:	e038      	b.n	800078a <update7SEG+0x106>
	case 2:
		display7SEG(led_buffer[2]);
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <update7SEG+0x110>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fdff 	bl	8000320 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <update7SEG+0x114>)
 8000728:	f001 fc7d 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <update7SEG+0x114>)
 8000732:	f001 fc78 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <update7SEG+0x114>)
 800073e:	f001 fc72 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <update7SEG+0x114>)
 800074a:	f001 fc6c 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 800074e:	e01c      	b.n	800078a <update7SEG+0x106>
	case 3:
		display7SEG(led_buffer[3]);
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <update7SEG+0x110>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fde3 	bl	8000320 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <update7SEG+0x114>)
 8000760:	f001 fc61 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <update7SEG+0x114>)
 800076a:	f001 fc5c 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <update7SEG+0x114>)
 8000776:	f001 fc56 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <update7SEG+0x114>)
 8000782:	f001 fc50 	bl	8002026 <HAL_GPIO_WritePin>
		break;
 8000786:	e000      	b.n	800078a <update7SEG+0x106>
	default:
		break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000c0 	.word	0x200000c0
 8000798:	40010800 	.word	0x40010800

0800079c <updateClockBufferMode1>:
int counter_lane1 = 1, counter_lane2 = 1;
void updateClockBufferMode1(){
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	if(counter_lane1 <= RED){
 80007a0:	4b95      	ldr	r3, [pc, #596]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b95      	ldr	r3, [pc, #596]	; (80009fc <updateClockBufferMode1+0x260>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dc1f      	bgt.n	80007ec <updateClockBufferMode1+0x50>
		led_buffer[0] = (RED - counter_lane1) / 10;
 80007ac:	4b93      	ldr	r3, [pc, #588]	; (80009fc <updateClockBufferMode1+0x260>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <updateClockBufferMode1+0x264>)
 80007b8:	fb82 1203 	smull	r1, r2, r2, r3
 80007bc:	1092      	asrs	r2, r2, #2
 80007be:	17db      	asrs	r3, r3, #31
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a90      	ldr	r2, [pc, #576]	; (8000a04 <updateClockBufferMode1+0x268>)
 80007c4:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter_lane1) % 10;
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <updateClockBufferMode1+0x260>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b8b      	ldr	r3, [pc, #556]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1ad1      	subs	r1, r2, r3
 80007d0:	4b8b      	ldr	r3, [pc, #556]	; (8000a00 <updateClockBufferMode1+0x264>)
 80007d2:	fb83 2301 	smull	r2, r3, r3, r1
 80007d6:	109a      	asrs	r2, r3, #2
 80007d8:	17cb      	asrs	r3, r1, #31
 80007da:	1ad2      	subs	r2, r2, r3
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <updateClockBufferMode1+0x268>)
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	e059      	b.n	80008a0 <updateClockBufferMode1+0x104>
	}
	else if(counter_lane1 <= (RED + GREEN)){
 80007ec:	4b83      	ldr	r3, [pc, #524]	; (80009fc <updateClockBufferMode1+0x260>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	441a      	add	r2, r3
 80007f6:	4b80      	ldr	r3, [pc, #512]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	db25      	blt.n	800084a <updateClockBufferMode1+0xae>
		led_buffer[0] = (RED + GREEN - counter_lane1) / 10;
 80007fe:	4b7f      	ldr	r3, [pc, #508]	; (80009fc <updateClockBufferMode1+0x260>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b81      	ldr	r3, [pc, #516]	; (8000a08 <updateClockBufferMode1+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	441a      	add	r2, r3
 8000808:	4b7b      	ldr	r3, [pc, #492]	; (80009f8 <updateClockBufferMode1+0x25c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4a7c      	ldr	r2, [pc, #496]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	1092      	asrs	r2, r2, #2
 8000816:	17db      	asrs	r3, r3, #31
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	4a7a      	ldr	r2, [pc, #488]	; (8000a04 <updateClockBufferMode1+0x268>)
 800081c:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter_lane1) % 10;
 800081e:	4b77      	ldr	r3, [pc, #476]	; (80009fc <updateClockBufferMode1+0x260>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b79      	ldr	r3, [pc, #484]	; (8000a08 <updateClockBufferMode1+0x26c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	441a      	add	r2, r3
 8000828:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <updateClockBufferMode1+0x25c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1ad1      	subs	r1, r2, r3
 800082e:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000830:	fb83 2301 	smull	r2, r3, r3, r1
 8000834:	109a      	asrs	r2, r3, #2
 8000836:	17cb      	asrs	r3, r1, #31
 8000838:	1ad2      	subs	r2, r2, r3
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	1aca      	subs	r2, r1, r3
 8000844:	4b6f      	ldr	r3, [pc, #444]	; (8000a04 <updateClockBufferMode1+0x268>)
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	e02a      	b.n	80008a0 <updateClockBufferMode1+0x104>
	}
	else{
		led_buffer[0] = (RED + GREEN + YELLOW - counter_lane1) / 10;
 800084a:	4b6c      	ldr	r3, [pc, #432]	; (80009fc <updateClockBufferMode1+0x260>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b6e      	ldr	r3, [pc, #440]	; (8000a08 <updateClockBufferMode1+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	441a      	add	r2, r3
 8000854:	4b6d      	ldr	r3, [pc, #436]	; (8000a0c <updateClockBufferMode1+0x270>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	441a      	add	r2, r3
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <updateClockBufferMode1+0x25c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a67      	ldr	r2, [pc, #412]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1092      	asrs	r2, r2, #2
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a65      	ldr	r2, [pc, #404]	; (8000a04 <updateClockBufferMode1+0x268>)
 800086e:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + YELLOW - counter_lane1) % 10;
 8000870:	4b62      	ldr	r3, [pc, #392]	; (80009fc <updateClockBufferMode1+0x260>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b64      	ldr	r3, [pc, #400]	; (8000a08 <updateClockBufferMode1+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	441a      	add	r2, r3
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <updateClockBufferMode1+0x270>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	441a      	add	r2, r3
 8000880:	4b5d      	ldr	r3, [pc, #372]	; (80009f8 <updateClockBufferMode1+0x25c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000888:	fb83 2301 	smull	r2, r3, r3, r1
 800088c:	109a      	asrs	r2, r3, #2
 800088e:	17cb      	asrs	r3, r1, #31
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	1aca      	subs	r2, r1, r3
 800089c:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <updateClockBufferMode1+0x268>)
 800089e:	605a      	str	r2, [r3, #4]
	}
	counter_lane1++;
 80008a0:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a54      	ldr	r2, [pc, #336]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80008a8:	6013      	str	r3, [r2, #0]
	if(counter_lane1 > RED + YELLOW + GREEN) counter_lane1 = 1;
 80008aa:	4b54      	ldr	r3, [pc, #336]	; (80009fc <updateClockBufferMode1+0x260>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b57      	ldr	r3, [pc, #348]	; (8000a0c <updateClockBufferMode1+0x270>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	441a      	add	r2, r3
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	441a      	add	r2, r3
 80008ba:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	da02      	bge.n	80008c8 <updateClockBufferMode1+0x12c>
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <updateClockBufferMode1+0x25c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
	//
	if(counter_lane2 <= GREEN){
 80008c8:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <updateClockBufferMode1+0x274>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dc1f      	bgt.n	8000914 <updateClockBufferMode1+0x178>
		led_buffer[2] = (GREEN - counter_lane2) / 10;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <updateClockBufferMode1+0x274>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4a48      	ldr	r2, [pc, #288]	; (8000a00 <updateClockBufferMode1+0x264>)
 80008e0:	fb82 1203 	smull	r1, r2, r2, r3
 80008e4:	1092      	asrs	r2, r2, #2
 80008e6:	17db      	asrs	r3, r3, #31
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <updateClockBufferMode1+0x268>)
 80008ec:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter_lane2) % 10;
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <updateClockBufferMode1+0x274>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1ad1      	subs	r1, r2, r3
 80008f8:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <updateClockBufferMode1+0x264>)
 80008fa:	fb83 2301 	smull	r2, r3, r3, r1
 80008fe:	109a      	asrs	r2, r3, #2
 8000900:	17cb      	asrs	r3, r1, #31
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	1aca      	subs	r2, r1, r3
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <updateClockBufferMode1+0x268>)
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	e059      	b.n	80009c8 <updateClockBufferMode1+0x22c>
	}
	else if(counter_lane2 <= (YELLOW + GREEN)){
 8000914:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <updateClockBufferMode1+0x270>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <updateClockBufferMode1+0x26c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	441a      	add	r2, r3
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <updateClockBufferMode1+0x274>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	db25      	blt.n	8000972 <updateClockBufferMode1+0x1d6>
		led_buffer[2] = (YELLOW + GREEN - counter_lane2) / 10;
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <updateClockBufferMode1+0x270>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <updateClockBufferMode1+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	441a      	add	r2, r3
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <updateClockBufferMode1+0x274>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1092      	asrs	r2, r2, #2
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <updateClockBufferMode1+0x268>)
 8000944:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (YELLOW + GREEN - counter_lane2) % 10;
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <updateClockBufferMode1+0x270>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <updateClockBufferMode1+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	441a      	add	r2, r3
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <updateClockBufferMode1+0x274>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1ad1      	subs	r1, r2, r3
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <updateClockBufferMode1+0x264>)
 8000958:	fb83 2301 	smull	r2, r3, r3, r1
 800095c:	109a      	asrs	r2, r3, #2
 800095e:	17cb      	asrs	r3, r1, #31
 8000960:	1ad2      	subs	r2, r2, r3
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	1aca      	subs	r2, r1, r3
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <updateClockBufferMode1+0x268>)
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	e02a      	b.n	80009c8 <updateClockBufferMode1+0x22c>
	}
	else{
		led_buffer[2] = (RED + GREEN + YELLOW - counter_lane2) / 10;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <updateClockBufferMode1+0x260>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <updateClockBufferMode1+0x26c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	441a      	add	r2, r3
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <updateClockBufferMode1+0x270>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	441a      	add	r2, r3
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <updateClockBufferMode1+0x274>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <updateClockBufferMode1+0x264>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1092      	asrs	r2, r2, #2
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <updateClockBufferMode1+0x268>)
 8000996:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + YELLOW - counter_lane2) % 10;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <updateClockBufferMode1+0x260>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <updateClockBufferMode1+0x26c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	441a      	add	r2, r3
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <updateClockBufferMode1+0x270>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	441a      	add	r2, r3
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <updateClockBufferMode1+0x274>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1ad1      	subs	r1, r2, r3
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <updateClockBufferMode1+0x264>)
 80009b0:	fb83 2301 	smull	r2, r3, r3, r1
 80009b4:	109a      	asrs	r2, r3, #2
 80009b6:	17cb      	asrs	r3, r1, #31
 80009b8:	1ad2      	subs	r2, r2, r3
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <updateClockBufferMode1+0x268>)
 80009c6:	60da      	str	r2, [r3, #12]
	}
	counter_lane2++;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <updateClockBufferMode1+0x274>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <updateClockBufferMode1+0x274>)
 80009d0:	6013      	str	r3, [r2, #0]
	if(counter_lane2 > RED + YELLOW + GREEN) counter_lane2 = 1;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <updateClockBufferMode1+0x260>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <updateClockBufferMode1+0x270>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	441a      	add	r2, r3
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <updateClockBufferMode1+0x26c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	441a      	add	r2, r3
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <updateClockBufferMode1+0x274>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	da02      	bge.n	80009f0 <updateClockBufferMode1+0x254>
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <updateClockBufferMode1+0x274>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000030 	.word	0x20000030
 80009fc:	20000038 	.word	0x20000038
 8000a00:	66666667 	.word	0x66666667
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	20000040 	.word	0x20000040
 8000a0c:	2000003c 	.word	0x2000003c
 8000a10:	20000034 	.word	0x20000034

08000a14 <updateClockBufferMode2>:
void updateClockBufferMode2(){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <updateClockBufferMode2+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <updateClockBufferMode2+0x4c>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	605a      	str	r2, [r3, #4]
	led_buffer[2] = RED / 10;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <updateClockBufferMode2+0x50>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <updateClockBufferMode2+0x54>)
 8000a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2e:	1092      	asrs	r2, r2, #2
 8000a30:	17db      	asrs	r3, r3, #31
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <updateClockBufferMode2+0x4c>)
 8000a36:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <updateClockBufferMode2+0x50>)
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <updateClockBufferMode2+0x54>)
 8000a3e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a42:	109a      	asrs	r2, r3, #2
 8000a44:	17cb      	asrs	r3, r1, #31
 8000a46:	1ad2      	subs	r2, r2, r3
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	1aca      	subs	r2, r1, r3
 8000a52:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <updateClockBufferMode2+0x4c>)
 8000a54:	60da      	str	r2, [r3, #12]
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200000c0 	.word	0x200000c0
 8000a64:	20000038 	.word	0x20000038
 8000a68:	66666667 	.word	0x66666667

08000a6c <updateClockBufferMode3>:

void updateClockBufferMode3(){
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <updateClockBufferMode3+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <updateClockBufferMode3+0x4c>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = YELLOW / 10;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <updateClockBufferMode3+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <updateClockBufferMode3+0x54>)
 8000a82:	fb82 1203 	smull	r1, r2, r2, r3
 8000a86:	1092      	asrs	r2, r2, #2
 8000a88:	17db      	asrs	r3, r3, #31
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <updateClockBufferMode3+0x4c>)
 8000a8e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = YELLOW % 10;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <updateClockBufferMode3+0x50>)
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <updateClockBufferMode3+0x54>)
 8000a96:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9a:	109a      	asrs	r2, r3, #2
 8000a9c:	17cb      	asrs	r3, r1, #31
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1aca      	subs	r2, r1, r3
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <updateClockBufferMode3+0x4c>)
 8000aac:	60da      	str	r2, [r3, #12]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000c0 	.word	0x200000c0
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	66666667 	.word	0x66666667

08000ac4 <updateClockBufferMode4>:

void updateClockBufferMode4(){
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <updateClockBufferMode4+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <updateClockBufferMode4+0x4c>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	605a      	str	r2, [r3, #4]
	led_buffer[2] = GREEN / 10;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <updateClockBufferMode4+0x50>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <updateClockBufferMode4+0x54>)
 8000ada:	fb82 1203 	smull	r1, r2, r2, r3
 8000ade:	1092      	asrs	r2, r2, #2
 8000ae0:	17db      	asrs	r3, r3, #31
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <updateClockBufferMode4+0x4c>)
 8000ae6:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <updateClockBufferMode4+0x50>)
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <updateClockBufferMode4+0x54>)
 8000aee:	fb83 2301 	smull	r2, r3, r3, r1
 8000af2:	109a      	asrs	r2, r3, #2
 8000af4:	17cb      	asrs	r3, r1, #31
 8000af6:	1ad2      	subs	r2, r2, r3
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1aca      	subs	r2, r1, r3
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <updateClockBufferMode4+0x4c>)
 8000b04:	60da      	str	r2, [r3, #12]
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000c0 	.word	0x200000c0
 8000b14:	20000040 	.word	0x20000040
 8000b18:	66666667 	.word	0x66666667

08000b1c <fsm_automatic_run>:
 *      Author: Hii
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	switch(status){
 8000b20:	4b95      	ldr	r3, [pc, #596]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	2b0d      	cmp	r3, #13
 8000b28:	f200 81f8 	bhi.w	8000f1c <fsm_automatic_run+0x400>
 8000b2c:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <fsm_automatic_run+0x18>)
 8000b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b6d 	.word	0x08000b6d
 8000b38:	08000b75 	.word	0x08000b75
 8000b3c:	08000f1d 	.word	0x08000f1d
 8000b40:	08000f1d 	.word	0x08000f1d
 8000b44:	08000f1d 	.word	0x08000f1d
 8000b48:	08000f1d 	.word	0x08000f1d
 8000b4c:	08000f1d 	.word	0x08000f1d
 8000b50:	08000f1d 	.word	0x08000f1d
 8000b54:	08000f1d 	.word	0x08000f1d
 8000b58:	08000f1d 	.word	0x08000f1d
 8000b5c:	08000bef 	.word	0x08000bef
 8000b60:	08000cb5 	.word	0x08000cb5
 8000b64:	08000d9d 	.word	0x08000d9d
 8000b68:	08000e5d 	.word	0x08000e5d
		case INIT:
			status = MODE1;
 8000b6c:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
			break;
 8000b72:	e1da      	b.n	8000f2a <fsm_automatic_run+0x40e>
		case MODE1:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	4880      	ldr	r0, [pc, #512]	; (8000d7c <fsm_automatic_run+0x260>)
 8000b7c:	f001 fa53 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b86:	487d      	ldr	r0, [pc, #500]	; (8000d7c <fsm_automatic_run+0x260>)
 8000b88:	f001 fa4d 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	487a      	ldr	r0, [pc, #488]	; (8000d7c <fsm_automatic_run+0x260>)
 8000b94:	f001 fa47 	bl	8002026 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4877      	ldr	r0, [pc, #476]	; (8000d7c <fsm_automatic_run+0x260>)
 8000ba0:	f001 fa41 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000baa:	4874      	ldr	r0, [pc, #464]	; (8000d7c <fsm_automatic_run+0x260>)
 8000bac:	f001 fa3b 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb6:	4871      	ldr	r0, [pc, #452]	; (8000d7c <fsm_automatic_run+0x260>)
 8000bb8:	f001 fa35 	bl	8002026 <HAL_GPIO_WritePin>

			updateClockBufferMode1();
 8000bbc:	f7ff fdee 	bl	800079c <updateClockBufferMode1>

			setTimer0(GREEN * 1000);
 8000bc0:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <fsm_automatic_run+0x264>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fd73 	bl	80016b8 <setTimer0>
			setTimer1(1000);
 8000bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd6:	f000 fd89 	bl	80016ec <setTimer1>
			setTimer2(250);
 8000bda:	20fa      	movs	r0, #250	; 0xfa
 8000bdc:	f000 fda0 	bl	8001720 <setTimer2>
			clearTimer(3);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 fe27 	bl	8001834 <clearTimer>

			status = AUTO_RED1_GREEN2;
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000be8:	220b      	movs	r2, #11
 8000bea:	601a      	str	r2, [r3, #0]

			break;
 8000bec:	e19d      	b.n	8000f2a <fsm_automatic_run+0x40e>
		case AUTO_RED1_GREEN2:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	4861      	ldr	r0, [pc, #388]	; (8000d7c <fsm_automatic_run+0x260>)
 8000bf6:	f001 fa16 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	485e      	ldr	r0, [pc, #376]	; (8000d7c <fsm_automatic_run+0x260>)
 8000c02:	f001 fa10 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0c:	485b      	ldr	r0, [pc, #364]	; (8000d7c <fsm_automatic_run+0x260>)
 8000c0e:	f001 fa0a 	bl	8002026 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c18:	4858      	ldr	r0, [pc, #352]	; (8000d7c <fsm_automatic_run+0x260>)
 8000c1a:	f001 fa04 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c24:	4855      	ldr	r0, [pc, #340]	; (8000d7c <fsm_automatic_run+0x260>)
 8000c26:	f001 f9fe 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c30:	4852      	ldr	r0, [pc, #328]	; (8000d7c <fsm_automatic_run+0x260>)
 8000c32:	f001 f9f8 	bl	8002026 <HAL_GPIO_WritePin>
			if(timer0_flag == 1){
 8000c36:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <fsm_automatic_run+0x268>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10b      	bne.n	8000c56 <fsm_automatic_run+0x13a>
				status = AUTO_RED1_YELLOW2;
 8000c3e:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000c40:	220c      	movs	r2, #12
 8000c42:	601a      	str	r2, [r3, #0]
				setTimer0(YELLOW * 1000);
 8000c44:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <fsm_automatic_run+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fd31 	bl	80016b8 <setTimer0>
			}
			if(timer1_flag == 1){
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <fsm_automatic_run+0x270>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d105      	bne.n	8000c6a <fsm_automatic_run+0x14e>
				updateClockBufferMode1();
 8000c5e:	f7ff fd9d 	bl	800079c <updateClockBufferMode1>
				setTimer1(1000);
 8000c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c66:	f000 fd41 	bl	80016ec <setTimer1>
			}
			if(timer2_flag == 1){
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <fsm_automatic_run+0x274>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d113      	bne.n	8000c9a <fsm_automatic_run+0x17e>
				update7SEG(index_led++);
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <fsm_automatic_run+0x278>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	4946      	ldr	r1, [pc, #280]	; (8000d94 <fsm_automatic_run+0x278>)
 8000c7a:	600a      	str	r2, [r1, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd01 	bl	8000684 <update7SEG>
				if(index_led >= MAX_LED) index_led = 0;
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <fsm_automatic_run+0x278>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <fsm_automatic_run+0x27c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	db02      	blt.n	8000c94 <fsm_automatic_run+0x178>
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <fsm_automatic_run+0x278>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
				setTimer2(250);
 8000c94:	20fa      	movs	r0, #250	; 0xfa
 8000c96:	f000 fd43 	bl	8001720 <setTimer2>
			}
			if(isButtonPressed(0) == 1){
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fa56 	bl	800014c <isButtonPressed>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <fsm_automatic_run+0x190>
				status = MODE2;
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	601a      	str	r2, [r3, #0]
			}
			clearTimer(3);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 fdc1 	bl	8001834 <clearTimer>
			break;
 8000cb2:	e13a      	b.n	8000f2a <fsm_automatic_run+0x40e>
		case AUTO_RED1_YELLOW2:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	4830      	ldr	r0, [pc, #192]	; (8000d7c <fsm_automatic_run+0x260>)
 8000cbc:	f001 f9b3 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	482d      	ldr	r0, [pc, #180]	; (8000d7c <fsm_automatic_run+0x260>)
 8000cc8:	f001 f9ad 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd2:	482a      	ldr	r0, [pc, #168]	; (8000d7c <fsm_automatic_run+0x260>)
 8000cd4:	f001 f9a7 	bl	8002026 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <fsm_automatic_run+0x260>)
 8000ce0:	f001 f9a1 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cea:	4824      	ldr	r0, [pc, #144]	; (8000d7c <fsm_automatic_run+0x260>)
 8000cec:	f001 f99b 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	4821      	ldr	r0, [pc, #132]	; (8000d7c <fsm_automatic_run+0x260>)
 8000cf8:	f001 f995 	bl	8002026 <HAL_GPIO_WritePin>

			if(timer0_flag == 1){
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <fsm_automatic_run+0x268>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10b      	bne.n	8000d1c <fsm_automatic_run+0x200>
				status = AUTO_GREEN1_RED2;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000d06:	220d      	movs	r2, #13
 8000d08:	601a      	str	r2, [r3, #0]
				setTimer0(GREEN * 1000);
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <fsm_automatic_run+0x264>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fcce 	bl	80016b8 <setTimer0>
			}
			if(timer1_flag == 1){
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <fsm_automatic_run+0x270>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <fsm_automatic_run+0x214>
				updateClockBufferMode1();
 8000d24:	f7ff fd3a 	bl	800079c <updateClockBufferMode1>
				setTimer1(1000);
 8000d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2c:	f000 fcde 	bl	80016ec <setTimer1>
			}
			if(timer2_flag == 1){
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <fsm_automatic_run+0x274>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d113      	bne.n	8000d60 <fsm_automatic_run+0x244>
				update7SEG(index_led++);
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <fsm_automatic_run+0x278>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	4915      	ldr	r1, [pc, #84]	; (8000d94 <fsm_automatic_run+0x278>)
 8000d40:	600a      	str	r2, [r1, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fc9e 	bl	8000684 <update7SEG>
				if(index_led >= MAX_LED) index_led = 0;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <fsm_automatic_run+0x278>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <fsm_automatic_run+0x27c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	db02      	blt.n	8000d5a <fsm_automatic_run+0x23e>
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <fsm_automatic_run+0x278>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
				setTimer2(250);
 8000d5a:	20fa      	movs	r0, #250	; 0xfa
 8000d5c:	f000 fce0 	bl	8001720 <setTimer2>
			}
			if(isButtonPressed(0) == 1){
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff f9f3 	bl	800014c <isButtonPressed>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	f040 80d9 	bne.w	8000f20 <fsm_automatic_run+0x404>
				status = MODE2;
 8000d6e:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <fsm_automatic_run+0x25c>)
 8000d70:	2203      	movs	r2, #3
 8000d72:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d74:	e0d4      	b.n	8000f20 <fsm_automatic_run+0x404>
 8000d76:	bf00      	nop
 8000d78:	2000009c 	.word	0x2000009c
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	20000040 	.word	0x20000040
 8000d84:	200000a4 	.word	0x200000a4
 8000d88:	2000003c 	.word	0x2000003c
 8000d8c:	200000ac 	.word	0x200000ac
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	20000098 	.word	0x20000098
 8000d98:	20000044 	.word	0x20000044
		case AUTO_GREEN1_RED2:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	4863      	ldr	r0, [pc, #396]	; (8000f30 <fsm_automatic_run+0x414>)
 8000da4:	f001 f93f 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dae:	4860      	ldr	r0, [pc, #384]	; (8000f30 <fsm_automatic_run+0x414>)
 8000db0:	f001 f939 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dba:	485d      	ldr	r0, [pc, #372]	; (8000f30 <fsm_automatic_run+0x414>)
 8000dbc:	f001 f933 	bl	8002026 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc6:	485a      	ldr	r0, [pc, #360]	; (8000f30 <fsm_automatic_run+0x414>)
 8000dc8:	f001 f92d 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd2:	4857      	ldr	r0, [pc, #348]	; (8000f30 <fsm_automatic_run+0x414>)
 8000dd4:	f001 f927 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dde:	4854      	ldr	r0, [pc, #336]	; (8000f30 <fsm_automatic_run+0x414>)
 8000de0:	f001 f921 	bl	8002026 <HAL_GPIO_WritePin>

			if(timer0_flag == 1){
 8000de4:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <fsm_automatic_run+0x418>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10b      	bne.n	8000e04 <fsm_automatic_run+0x2e8>
				status = AUTO_YELLOW1_RED2;
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <fsm_automatic_run+0x41c>)
 8000dee:	220e      	movs	r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
				setTimer0(YELLOW * 1000);
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <fsm_automatic_run+0x420>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fc5a 	bl	80016b8 <setTimer0>
			}
			if(timer1_flag == 1){
 8000e04:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <fsm_automatic_run+0x424>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <fsm_automatic_run+0x2fc>
				updateClockBufferMode1();
 8000e0c:	f7ff fcc6 	bl	800079c <updateClockBufferMode1>
				setTimer1(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f000 fc6a 	bl	80016ec <setTimer1>
			}
			if(timer2_flag == 1){
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <fsm_automatic_run+0x428>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d113      	bne.n	8000e48 <fsm_automatic_run+0x32c>
				update7SEG(index_led++);
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	4948      	ldr	r1, [pc, #288]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000e28:	600a      	str	r2, [r1, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc2a 	bl	8000684 <update7SEG>
				if(index_led >= MAX_LED) index_led = 0;
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <fsm_automatic_run+0x430>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	db02      	blt.n	8000e42 <fsm_automatic_run+0x326>
 8000e3c:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
				setTimer2(250);
 8000e42:	20fa      	movs	r0, #250	; 0xfa
 8000e44:	f000 fc6c 	bl	8001720 <setTimer2>
			}
			if(isButtonPressed(0) == 1){
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff f97f 	bl	800014c <isButtonPressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d167      	bne.n	8000f24 <fsm_automatic_run+0x408>
				status = MODE2;
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <fsm_automatic_run+0x41c>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e5a:	e063      	b.n	8000f24 <fsm_automatic_run+0x408>
		case AUTO_YELLOW1_RED2:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	4833      	ldr	r0, [pc, #204]	; (8000f30 <fsm_automatic_run+0x414>)
 8000e64:	f001 f8df 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6e:	4830      	ldr	r0, [pc, #192]	; (8000f30 <fsm_automatic_run+0x414>)
 8000e70:	f001 f8d9 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	482d      	ldr	r0, [pc, #180]	; (8000f30 <fsm_automatic_run+0x414>)
 8000e7c:	f001 f8d3 	bl	8002026 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	482a      	ldr	r0, [pc, #168]	; (8000f30 <fsm_automatic_run+0x414>)
 8000e88:	f001 f8cd 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e92:	4827      	ldr	r0, [pc, #156]	; (8000f30 <fsm_automatic_run+0x414>)
 8000e94:	f001 f8c7 	bl	8002026 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9e:	4824      	ldr	r0, [pc, #144]	; (8000f30 <fsm_automatic_run+0x414>)
 8000ea0:	f001 f8c1 	bl	8002026 <HAL_GPIO_WritePin>

			if(timer0_flag == 1){
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <fsm_automatic_run+0x418>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10b      	bne.n	8000ec4 <fsm_automatic_run+0x3a8>
				status = AUTO_RED1_GREEN2;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <fsm_automatic_run+0x41c>)
 8000eae:	220b      	movs	r2, #11
 8000eb0:	601a      	str	r2, [r3, #0]
				setTimer0(GREEN * 1000);
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <fsm_automatic_run+0x434>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fbfa 	bl	80016b8 <setTimer0>
			}
			if(timer1_flag == 1){
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <fsm_automatic_run+0x424>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <fsm_automatic_run+0x3bc>
				updateClockBufferMode1();
 8000ecc:	f7ff fc66 	bl	800079c <updateClockBufferMode1>
				setTimer1(1000);
 8000ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed4:	f000 fc0a 	bl	80016ec <setTimer1>
			}
			if(timer2_flag == 1){
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <fsm_automatic_run+0x428>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d113      	bne.n	8000f08 <fsm_automatic_run+0x3ec>
				update7SEG(index_led++);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	4918      	ldr	r1, [pc, #96]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000ee8:	600a      	str	r2, [r1, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fbca 	bl	8000684 <update7SEG>
				if(index_led >= MAX_LED) index_led = 0;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <fsm_automatic_run+0x430>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	db02      	blt.n	8000f02 <fsm_automatic_run+0x3e6>
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <fsm_automatic_run+0x42c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
				setTimer2(250);
 8000f02:	20fa      	movs	r0, #250	; 0xfa
 8000f04:	f000 fc0c 	bl	8001720 <setTimer2>
			}
			if(isButtonPressed(0) == 1){
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff f91f 	bl	800014c <isButtonPressed>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d109      	bne.n	8000f28 <fsm_automatic_run+0x40c>
				status = MODE2;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <fsm_automatic_run+0x41c>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f1a:	e005      	b.n	8000f28 <fsm_automatic_run+0x40c>
		default:
			break;
 8000f1c:	bf00      	nop
 8000f1e:	e004      	b.n	8000f2a <fsm_automatic_run+0x40e>
			break;
 8000f20:	bf00      	nop
 8000f22:	e002      	b.n	8000f2a <fsm_automatic_run+0x40e>
			break;
 8000f24:	bf00      	nop
 8000f26:	e000      	b.n	8000f2a <fsm_automatic_run+0x40e>
			break;
 8000f28:	bf00      	nop
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010800 	.word	0x40010800
 8000f34:	200000a4 	.word	0x200000a4
 8000f38:	2000009c 	.word	0x2000009c
 8000f3c:	2000003c 	.word	0x2000003c
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	200000b4 	.word	0x200000b4
 8000f48:	20000098 	.word	0x20000098
 8000f4c:	20000044 	.word	0x20000044
 8000f50:	20000040 	.word	0x20000040

08000f54 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	switch(status){
 8000f58:	4bbe      	ldr	r3, [pc, #760]	; (8001254 <fsm_setting_run+0x300>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	2b27      	cmp	r3, #39	; 0x27
 8000f60:	f200 825f 	bhi.w	8001422 <fsm_setting_run+0x4ce>
 8000f64:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <fsm_setting_run+0x18>)
 8000f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	0800100d 	.word	0x0800100d
 8000f70:	0800115f 	.word	0x0800115f
 8000f74:	080012df 	.word	0x080012df
 8000f78:	08001423 	.word	0x08001423
 8000f7c:	08001423 	.word	0x08001423
 8000f80:	08001423 	.word	0x08001423
 8000f84:	08001423 	.word	0x08001423
 8000f88:	08001423 	.word	0x08001423
 8000f8c:	08001423 	.word	0x08001423
 8000f90:	08001423 	.word	0x08001423
 8000f94:	08001423 	.word	0x08001423
 8000f98:	08001423 	.word	0x08001423
 8000f9c:	08001423 	.word	0x08001423
 8000fa0:	08001423 	.word	0x08001423
 8000fa4:	08001423 	.word	0x08001423
 8000fa8:	08001423 	.word	0x08001423
 8000fac:	08001423 	.word	0x08001423
 8000fb0:	08001423 	.word	0x08001423
 8000fb4:	08001423 	.word	0x08001423
 8000fb8:	08001077 	.word	0x08001077
 8000fbc:	08001423 	.word	0x08001423
 8000fc0:	08001423 	.word	0x08001423
 8000fc4:	08001423 	.word	0x08001423
 8000fc8:	08001423 	.word	0x08001423
 8000fcc:	08001423 	.word	0x08001423
 8000fd0:	08001423 	.word	0x08001423
 8000fd4:	08001423 	.word	0x08001423
 8000fd8:	08001423 	.word	0x08001423
 8000fdc:	08001423 	.word	0x08001423
 8000fe0:	080011c9 	.word	0x080011c9
 8000fe4:	08001423 	.word	0x08001423
 8000fe8:	08001423 	.word	0x08001423
 8000fec:	08001423 	.word	0x08001423
 8000ff0:	08001423 	.word	0x08001423
 8000ff4:	08001423 	.word	0x08001423
 8000ff8:	08001423 	.word	0x08001423
 8000ffc:	08001423 	.word	0x08001423
 8001000:	08001423 	.word	0x08001423
 8001004:	08001423 	.word	0x08001423
 8001008:	08001349 	.word	0x08001349
	case MODE2:
		clearTimer(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f000 fc11 	bl	8001834 <clearTimer>
		clearTimer(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 fc0e 	bl	8001834 <clearTimer>
		setTimer2(250);
 8001018:	20fa      	movs	r0, #250	; 0xfa
 800101a:	f000 fb81 	bl	8001720 <setTimer2>
		setTimer3(500);
 800101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001022:	f000 fb97 	bl	8001754 <setTimer3>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	488a      	ldr	r0, [pc, #552]	; (8001258 <fsm_setting_run+0x304>)
 800102e:	f000 fffa 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001038:	4887      	ldr	r0, [pc, #540]	; (8001258 <fsm_setting_run+0x304>)
 800103a:	f000 fff4 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001044:	4884      	ldr	r0, [pc, #528]	; (8001258 <fsm_setting_run+0x304>)
 8001046:	f000 ffee 	bl	8002026 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001050:	4881      	ldr	r0, [pc, #516]	; (8001258 <fsm_setting_run+0x304>)
 8001052:	f000 ffe8 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105c:	487e      	ldr	r0, [pc, #504]	; (8001258 <fsm_setting_run+0x304>)
 800105e:	f000 ffe2 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001068:	487b      	ldr	r0, [pc, #492]	; (8001258 <fsm_setting_run+0x304>)
 800106a:	f000 ffdc 	bl	8002026 <HAL_GPIO_WritePin>
		status = INC_RED;
 800106e:	4b79      	ldr	r3, [pc, #484]	; (8001254 <fsm_setting_run+0x300>)
 8001070:	2216      	movs	r2, #22
 8001072:	601a      	str	r2, [r3, #0]
		break;
 8001074:	e1dc      	b.n	8001430 <fsm_setting_run+0x4dc>
	case INC_RED:
		if(timer2_flag == 1){
 8001076:	4b79      	ldr	r3, [pc, #484]	; (800125c <fsm_setting_run+0x308>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d115      	bne.n	80010aa <fsm_setting_run+0x156>
			updateClockBufferMode2();
 800107e:	f7ff fcc9 	bl	8000a14 <updateClockBufferMode2>
			update7SEG(index_led++);
 8001082:	4b77      	ldr	r3, [pc, #476]	; (8001260 <fsm_setting_run+0x30c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	4975      	ldr	r1, [pc, #468]	; (8001260 <fsm_setting_run+0x30c>)
 800108a:	600a      	str	r2, [r1, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff faf9 	bl	8000684 <update7SEG>
			if(index_led >= MAX_LED) index_led = 0;
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <fsm_setting_run+0x30c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b73      	ldr	r3, [pc, #460]	; (8001264 <fsm_setting_run+0x310>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	db02      	blt.n	80010a4 <fsm_setting_run+0x150>
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <fsm_setting_run+0x30c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80010a4:	20fa      	movs	r0, #250	; 0xfa
 80010a6:	f000 fb3b 	bl	8001720 <setTimer2>
		}
		if(timer3_flag == 1){
 80010aa:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <fsm_setting_run+0x314>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <fsm_setting_run+0x16e>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010b2:	2120      	movs	r1, #32
 80010b4:	4868      	ldr	r0, [pc, #416]	; (8001258 <fsm_setting_run+0x304>)
 80010b6:	f000 ffce 	bl	8002056 <HAL_GPIO_TogglePin>
			setTimer3(500);
 80010ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010be:	f000 fb49 	bl	8001754 <setTimer3>
		}
		if (isButtonPressed(0) == 1) {
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff f842 	bl	800014c <isButtonPressed>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <fsm_setting_run+0x180>
			status = MODE3;
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <fsm_setting_run+0x300>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff f839 	bl	800014c <isButtonPressed>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10e      	bne.n	80010fe <fsm_setting_run+0x1aa>
			if(RED < 99){
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <fsm_setting_run+0x318>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b62      	cmp	r3, #98	; 0x62
 80010e6:	dc05      	bgt.n	80010f4 <fsm_setting_run+0x1a0>
				RED++;
 80010e8:	4b60      	ldr	r3, [pc, #384]	; (800126c <fsm_setting_run+0x318>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a5f      	ldr	r2, [pc, #380]	; (800126c <fsm_setting_run+0x318>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e004      	b.n	80010fe <fsm_setting_run+0x1aa>
			}
			else{
				RED = YELLOW + 1;
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <fsm_setting_run+0x31c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a5c      	ldr	r2, [pc, #368]	; (800126c <fsm_setting_run+0x318>)
 80010fc:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2) == 1){
 80010fe:	2002      	movs	r0, #2
 8001100:	f7ff f824 	bl	800014c <isButtonPressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	f040 818d 	bne.w	8001426 <fsm_setting_run+0x4d2>
			if(RED <= YELLOW){
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <fsm_setting_run+0x318>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b57      	ldr	r3, [pc, #348]	; (8001270 <fsm_setting_run+0x31c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	dc04      	bgt.n	8001122 <fsm_setting_run+0x1ce>
			     RED = YELLOW + 1;
 8001118:	4b55      	ldr	r3, [pc, #340]	; (8001270 <fsm_setting_run+0x31c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a53      	ldr	r2, [pc, #332]	; (800126c <fsm_setting_run+0x318>)
 8001120:	6013      	str	r3, [r2, #0]
			}
			GREEN = RED - YELLOW;
 8001122:	4b52      	ldr	r3, [pc, #328]	; (800126c <fsm_setting_run+0x318>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b52      	ldr	r3, [pc, #328]	; (8001270 <fsm_setting_run+0x31c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4a51      	ldr	r2, [pc, #324]	; (8001274 <fsm_setting_run+0x320>)
 800112e:	6013      	str	r3, [r2, #0]
			clearTimer(3);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 fb7f 	bl	8001834 <clearTimer>
			setTimer0(GREEN * 1000);
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <fsm_setting_run+0x320>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fab8 	bl	80016b8 <setTimer0>
			setTimer1(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f000 face 	bl	80016ec <setTimer1>
			setTimer2(250);
 8001150:	20fa      	movs	r0, #250	; 0xfa
 8001152:	f000 fae5 	bl	8001720 <setTimer2>
			status = AUTO_RED1_GREEN2;
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <fsm_setting_run+0x300>)
 8001158:	220b      	movs	r2, #11
 800115a:	601a      	str	r2, [r3, #0]
		}
		break;
 800115c:	e163      	b.n	8001426 <fsm_setting_run+0x4d2>
	case MODE3:
		clearTimer(0);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 fb68 	bl	8001834 <clearTimer>
		clearTimer(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fb65 	bl	8001834 <clearTimer>
		setTimer2(250);
 800116a:	20fa      	movs	r0, #250	; 0xfa
 800116c:	f000 fad8 	bl	8001720 <setTimer2>
		setTimer3(500);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f000 faee 	bl	8001754 <setTimer3>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	4836      	ldr	r0, [pc, #216]	; (8001258 <fsm_setting_run+0x304>)
 8001180:	f000 ff51 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <fsm_setting_run+0x304>)
 800118c:	f000 ff4b 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <fsm_setting_run+0x304>)
 8001198:	f000 ff45 	bl	8002026 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	482d      	ldr	r0, [pc, #180]	; (8001258 <fsm_setting_run+0x304>)
 80011a4:	f000 ff3f 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	482a      	ldr	r0, [pc, #168]	; (8001258 <fsm_setting_run+0x304>)
 80011b0:	f000 ff39 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ba:	4827      	ldr	r0, [pc, #156]	; (8001258 <fsm_setting_run+0x304>)
 80011bc:	f000 ff33 	bl	8002026 <HAL_GPIO_WritePin>

		status = INC_YELLOW;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <fsm_setting_run+0x300>)
 80011c2:	2220      	movs	r2, #32
 80011c4:	601a      	str	r2, [r3, #0]
		break;
 80011c6:	e133      	b.n	8001430 <fsm_setting_run+0x4dc>
	case INC_YELLOW:
		if(timer2_flag == 1){
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <fsm_setting_run+0x308>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d115      	bne.n	80011fc <fsm_setting_run+0x2a8>
			update7SEG(index_led++);
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <fsm_setting_run+0x30c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4922      	ldr	r1, [pc, #136]	; (8001260 <fsm_setting_run+0x30c>)
 80011d8:	600a      	str	r2, [r1, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fa52 	bl	8000684 <update7SEG>
			updateClockBufferMode3();
 80011e0:	f7ff fc44 	bl	8000a6c <updateClockBufferMode3>
			if(index_led >= MAX_LED) index_led = 0;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <fsm_setting_run+0x30c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <fsm_setting_run+0x310>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	db02      	blt.n	80011f6 <fsm_setting_run+0x2a2>
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <fsm_setting_run+0x30c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f000 fa92 	bl	8001720 <setTimer2>
		}
		if(timer3_flag == 1){
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <fsm_setting_run+0x314>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <fsm_setting_run+0x2c0>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001204:	2120      	movs	r1, #32
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <fsm_setting_run+0x304>)
 8001208:	f000 ff25 	bl	8002056 <HAL_GPIO_TogglePin>
			setTimer3(500);
 800120c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001210:	f000 faa0 	bl	8001754 <setTimer3>
		}
		if(isButtonPressed(0) == 1){
 8001214:	2000      	movs	r0, #0
 8001216:	f7fe ff99 	bl	800014c <isButtonPressed>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <fsm_setting_run+0x2d2>
			status = MODE4;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <fsm_setting_run+0x300>)
 8001222:	2205      	movs	r2, #5
 8001224:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 8001226:	2001      	movs	r0, #1
 8001228:	f7fe ff90 	bl	800014c <isButtonPressed>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d125      	bne.n	800127e <fsm_setting_run+0x32a>
			if(YELLOW < 99 && YELLOW < RED - 1) {
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <fsm_setting_run+0x31c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b62      	cmp	r3, #98	; 0x62
 8001238:	dc1e      	bgt.n	8001278 <fsm_setting_run+0x324>
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <fsm_setting_run+0x318>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <fsm_setting_run+0x31c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	dd17      	ble.n	8001278 <fsm_setting_run+0x324>
				YELLOW++;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <fsm_setting_run+0x31c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <fsm_setting_run+0x31c>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e014      	b.n	800127e <fsm_setting_run+0x32a>
 8001254:	2000009c 	.word	0x2000009c
 8001258:	40010800 	.word	0x40010800
 800125c:	200000b4 	.word	0x200000b4
 8001260:	20000098 	.word	0x20000098
 8001264:	20000044 	.word	0x20000044
 8001268:	200000bc 	.word	0x200000bc
 800126c:	20000038 	.word	0x20000038
 8001270:	2000003c 	.word	0x2000003c
 8001274:	20000040 	.word	0x20000040
			} else {
			    YELLOW = 1;
 8001278:	4b6e      	ldr	r3, [pc, #440]	; (8001434 <fsm_setting_run+0x4e0>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonPressed(2) == 1){
 800127e:	2002      	movs	r0, #2
 8001280:	f7fe ff64 	bl	800014c <isButtonPressed>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 80cf 	bne.w	800142a <fsm_setting_run+0x4d6>
			if (RED <= YELLOW) RED = YELLOW + 1;
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <fsm_setting_run+0x4e4>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <fsm_setting_run+0x4e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	dc04      	bgt.n	80012a2 <fsm_setting_run+0x34e>
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <fsm_setting_run+0x4e0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a66      	ldr	r2, [pc, #408]	; (8001438 <fsm_setting_run+0x4e4>)
 80012a0:	6013      	str	r3, [r2, #0]
			GREEN = RED - YELLOW;
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <fsm_setting_run+0x4e4>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <fsm_setting_run+0x4e0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a63      	ldr	r2, [pc, #396]	; (800143c <fsm_setting_run+0x4e8>)
 80012ae:	6013      	str	r3, [r2, #0]
			clearTimer(3);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 fabf 	bl	8001834 <clearTimer>
			setTimer0(GREEN * 1000);
 80012b6:	4b61      	ldr	r3, [pc, #388]	; (800143c <fsm_setting_run+0x4e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f9f8 	bl	80016b8 <setTimer0>
			setTimer1(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f000 fa0e 	bl	80016ec <setTimer1>
			setTimer2(250);
 80012d0:	20fa      	movs	r0, #250	; 0xfa
 80012d2:	f000 fa25 	bl	8001720 <setTimer2>
			status = AUTO_RED1_GREEN2;
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <fsm_setting_run+0x4ec>)
 80012d8:	220b      	movs	r2, #11
 80012da:	601a      	str	r2, [r3, #0]
		}
		break;
 80012dc:	e0a5      	b.n	800142a <fsm_setting_run+0x4d6>
	case MODE4:
		clearTimer(0);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 faa8 	bl	8001834 <clearTimer>
		clearTimer(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 faa5 	bl	8001834 <clearTimer>
		setTimer2(250);
 80012ea:	20fa      	movs	r0, #250	; 0xfa
 80012ec:	f000 fa18 	bl	8001720 <setTimer2>
		setTimer3(500);
 80012f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f4:	f000 fa2e 	bl	8001754 <setTimer3>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4851      	ldr	r0, [pc, #324]	; (8001444 <fsm_setting_run+0x4f0>)
 8001300:	f000 fe91 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	484e      	ldr	r0, [pc, #312]	; (8001444 <fsm_setting_run+0x4f0>)
 800130c:	f000 fe8b 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	484b      	ldr	r0, [pc, #300]	; (8001444 <fsm_setting_run+0x4f0>)
 8001318:	f000 fe85 	bl	8002026 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001322:	4848      	ldr	r0, [pc, #288]	; (8001444 <fsm_setting_run+0x4f0>)
 8001324:	f000 fe7f 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132e:	4845      	ldr	r0, [pc, #276]	; (8001444 <fsm_setting_run+0x4f0>)
 8001330:	f000 fe79 	bl	8002026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133a:	4842      	ldr	r0, [pc, #264]	; (8001444 <fsm_setting_run+0x4f0>)
 800133c:	f000 fe73 	bl	8002026 <HAL_GPIO_WritePin>

		status = INC_GREEN;
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <fsm_setting_run+0x4ec>)
 8001342:	222a      	movs	r2, #42	; 0x2a
 8001344:	601a      	str	r2, [r3, #0]
		break;
 8001346:	e073      	b.n	8001430 <fsm_setting_run+0x4dc>
	case INC_GREEN:
		if(timer2_flag == 1){
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <fsm_setting_run+0x4f4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d115      	bne.n	800137c <fsm_setting_run+0x428>
			update7SEG(index_led++);
 8001350:	4b3e      	ldr	r3, [pc, #248]	; (800144c <fsm_setting_run+0x4f8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	493d      	ldr	r1, [pc, #244]	; (800144c <fsm_setting_run+0x4f8>)
 8001358:	600a      	str	r2, [r1, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f992 	bl	8000684 <update7SEG>
			updateClockBufferMode4();
 8001360:	f7ff fbb0 	bl	8000ac4 <updateClockBufferMode4>
			if(index_led >= MAX_LED) index_led = 0;
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <fsm_setting_run+0x4f8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <fsm_setting_run+0x4fc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	db02      	blt.n	8001376 <fsm_setting_run+0x422>
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <fsm_setting_run+0x4f8>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 8001376:	20fa      	movs	r0, #250	; 0xfa
 8001378:	f000 f9d2 	bl	8001720 <setTimer2>
		}
		if(timer3_flag == 1){
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <fsm_setting_run+0x500>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <fsm_setting_run+0x440>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001384:	2120      	movs	r1, #32
 8001386:	482f      	ldr	r0, [pc, #188]	; (8001444 <fsm_setting_run+0x4f0>)
 8001388:	f000 fe65 	bl	8002056 <HAL_GPIO_TogglePin>
			setTimer3(500);
 800138c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001390:	f000 f9e0 	bl	8001754 <setTimer3>
		}
		if(isButtonPressed(0) == 1){
 8001394:	2000      	movs	r0, #0
 8001396:	f7fe fed9 	bl	800014c <isButtonPressed>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d102      	bne.n	80013a6 <fsm_setting_run+0x452>
			status = MODE1;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <fsm_setting_run+0x4ec>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7fe fed0 	bl	800014c <isButtonPressed>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d113      	bne.n	80013da <fsm_setting_run+0x486>
			if (GREEN < 99 && GREEN < RED - 1){
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <fsm_setting_run+0x4e8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b62      	cmp	r3, #98	; 0x62
 80013b8:	dc0c      	bgt.n	80013d4 <fsm_setting_run+0x480>
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <fsm_setting_run+0x4e4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <fsm_setting_run+0x4e8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dd05      	ble.n	80013d4 <fsm_setting_run+0x480>
				GREEN++;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <fsm_setting_run+0x4e8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <fsm_setting_run+0x4e8>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e002      	b.n	80013da <fsm_setting_run+0x486>
			}
			else{
				GREEN = 1;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <fsm_setting_run+0x4e8>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonPressed(2) == 1){
 80013da:	2002      	movs	r0, #2
 80013dc:	f7fe feb6 	bl	800014c <isButtonPressed>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d123      	bne.n	800142e <fsm_setting_run+0x4da>
			RED = GREEN + YELLOW;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <fsm_setting_run+0x4e8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <fsm_setting_run+0x4e0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <fsm_setting_run+0x4e4>)
 80013f2:	6013      	str	r3, [r2, #0]
			clearTimer(3);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fa1d 	bl	8001834 <clearTimer>
			setTimer0(GREEN * 1000);
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <fsm_setting_run+0x4e8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f956 	bl	80016b8 <setTimer0>
			setTimer1(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001410:	f000 f96c 	bl	80016ec <setTimer1>
			setTimer2(250);
 8001414:	20fa      	movs	r0, #250	; 0xfa
 8001416:	f000 f983 	bl	8001720 <setTimer2>
			status = AUTO_RED1_GREEN2;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <fsm_setting_run+0x4ec>)
 800141c:	220b      	movs	r2, #11
 800141e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001420:	e005      	b.n	800142e <fsm_setting_run+0x4da>
	default:
		break;
 8001422:	bf00      	nop
 8001424:	e004      	b.n	8001430 <fsm_setting_run+0x4dc>
		break;
 8001426:	bf00      	nop
 8001428:	e002      	b.n	8001430 <fsm_setting_run+0x4dc>
		break;
 800142a:	bf00      	nop
 800142c:	e000      	b.n	8001430 <fsm_setting_run+0x4dc>
		break;
 800142e:	bf00      	nop
	}
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000003c 	.word	0x2000003c
 8001438:	20000038 	.word	0x20000038
 800143c:	20000040 	.word	0x20000040
 8001440:	2000009c 	.word	0x2000009c
 8001444:	40010800 	.word	0x40010800
 8001448:	200000b4 	.word	0x200000b4
 800144c:	20000098 	.word	0x20000098
 8001450:	20000044 	.word	0x20000044
 8001454:	200000bc 	.word	0x200000bc

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fae2 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f814 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001464:	f000 f84e 	bl	8001504 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001468:	f000 f898 	bl	800159c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <main+0x2c>)
 800146e:	f001 fa37 	bl	80028e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = 1;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <main+0x30>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
  while (1)
  {
	 fsm_automatic_run();
 8001478:	f7ff fb50 	bl	8000b1c <fsm_automatic_run>
	 fsm_setting_run();
 800147c:	f7ff fd6a 	bl	8000f54 <fsm_setting_run>
	 fsm_automatic_run();
 8001480:	e7fa      	b.n	8001478 <main+0x20>
 8001482:	bf00      	nop
 8001484:	200000d0 	.word	0x200000d0
 8001488:	2000009c 	.word	0x2000009c

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b090      	sub	sp, #64	; 0x40
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	2228      	movs	r2, #40	; 0x28
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fdd0 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b2:	2301      	movs	r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b6:	2310      	movs	r3, #16
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fde0 	bl	8002088 <HAL_RCC_OscConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ce:	f000 f8ed 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f84c 	bl	8002588 <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014f6:	f000 f8d9 	bl	80016ac <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	; 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM2_Init+0x94>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_TIM2_Init+0x94>)
 800152a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM2_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_TIM2_Init+0x94>)
 8001538:	2209      	movs	r2, #9
 800153a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_TIM2_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM2_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <MX_TIM2_Init+0x94>)
 800154a:	f001 f979 	bl	8002840 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001554:	f000 f8aa 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4619      	mov	r1, r3
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_TIM2_Init+0x94>)
 8001566:	f001 faf7 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001570:	f000 f89c 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM2_Init+0x94>)
 8001582:	f001 fccf 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800158c:	f000 f88e 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000d0 	.word	0x200000d0

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a33      	ldr	r2, [pc, #204]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_GPIO_Init+0xe8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80015f8:	2200      	movs	r2, #0
 80015fa:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80015fe:	4822      	ldr	r0, [pc, #136]	; (8001688 <MX_GPIO_Init+0xec>)
 8001600:	f000 fd11 	bl	8002026 <HAL_GPIO_WritePin>
                          |EN3_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001604:	2200      	movs	r2, #0
 8001606:	217f      	movs	r1, #127	; 0x7f
 8001608:	4820      	ldr	r0, [pc, #128]	; (800168c <MX_GPIO_Init+0xf0>)
 800160a:	f000 fd0c 	bl	8002026 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800160e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	481b      	ldr	r0, [pc, #108]	; (8001690 <MX_GPIO_Init+0xf4>)
 8001624:	f000 fb6e 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8001628:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800162c:	613b      	str	r3, [r7, #16]
                          |EN3_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_GPIO_Init+0xec>)
 8001642:	f000 fb5f 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001646:	237f      	movs	r3, #127	; 0x7f
 8001648:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2302      	movs	r3, #2
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <MX_GPIO_Init+0xf0>)
 800165e:	f000 fb51 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001662:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_GPIO_Init+0xf0>)
 8001678:	f000 fb44 	bl	8001d04 <HAL_GPIO_Init>

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800
 800168c:	40010c00 	.word	0x40010c00
 8001690:	40011000 	.word	0x40011000

08001694 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	timer_run();
 800169c:	f000 f874 	bl	8001788 <timer_run>
	getKeyInput();
 80016a0:	f7fe fd7e 	bl	80001a0 <getKeyInput>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <setTimer0+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <setTimer0+0x2c>)
 80016cc:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <setTimer0+0x30>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000048 	.word	0x20000048
 80016e4:	200000a0 	.word	0x200000a0
 80016e8:	200000a4 	.word	0x200000a4

080016ec <setTimer1>:
void setTimer1(int duration){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <setTimer1+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	4a06      	ldr	r2, [pc, #24]	; (8001718 <setTimer1+0x2c>)
 8001700:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <setTimer1+0x30>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000048 	.word	0x20000048
 8001718:	200000a8 	.word	0x200000a8
 800171c:	200000ac 	.word	0x200000ac

08001720 <setTimer2>:
void setTimer2(int duration){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <setTimer2+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <setTimer2+0x2c>)
 8001734:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <setTimer2+0x30>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000048 	.word	0x20000048
 800174c:	200000b0 	.word	0x200000b0
 8001750:	200000b4 	.word	0x200000b4

08001754 <setTimer3>:
void setTimer3(int duration){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE ;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <setTimer3+0x28>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb92 f3f3 	sdiv	r3, r2, r3
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <setTimer3+0x2c>)
 8001768:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <setTimer3+0x30>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000048 	.word	0x20000048
 8001780:	200000b8 	.word	0x200000b8
 8001784:	200000bc 	.word	0x200000bc

08001788 <timer_run>:
void timer_run (){
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <timer_run+0x8c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd0b      	ble.n	80017ac <timer_run+0x24>
		timer0_counter --;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <timer_run+0x8c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <timer_run+0x8c>)
 800179c:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <timer_run+0x8c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <timer_run+0x24>
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <timer_run+0x90>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
	}
	if( timer1_counter > 0){
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <timer_run+0x94>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd0b      	ble.n	80017cc <timer_run+0x44>
		timer1_counter --;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <timer_run+0x94>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <timer_run+0x94>)
 80017bc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <timer_run+0x94>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <timer_run+0x44>
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <timer_run+0x98>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
	}
	if( timer2_counter > 0){
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <timer_run+0x9c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dd0b      	ble.n	80017ec <timer_run+0x64>
		timer2_counter --;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <timer_run+0x9c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <timer_run+0x9c>)
 80017dc:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <timer_run+0x9c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <timer_run+0x64>
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <timer_run+0xa0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
	}
	if( timer3_counter > 0){
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <timer_run+0xa4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dd0b      	ble.n	800180c <timer_run+0x84>
		timer3_counter --;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <timer_run+0xa4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <timer_run+0xa4>)
 80017fc:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <timer_run+0xa4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <timer_run+0x84>
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <timer_run+0xa8>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
	}
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	200000a0 	.word	0x200000a0
 8001818:	200000a4 	.word	0x200000a4
 800181c:	200000a8 	.word	0x200000a8
 8001820:	200000ac 	.word	0x200000ac
 8001824:	200000b0 	.word	0x200000b0
 8001828:	200000b4 	.word	0x200000b4
 800182c:	200000b8 	.word	0x200000b8
 8001830:	200000bc 	.word	0x200000bc

08001834 <clearTimer>:
void clearTimer(int timer_index) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d826      	bhi.n	8001890 <clearTimer+0x5c>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <clearTimer+0x14>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	08001867 	.word	0x08001867
 8001850:	08001875 	.word	0x08001875
 8001854:	08001883 	.word	0x08001883
    switch (timer_index) {
        case 0:
            timer0_counter = 0;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <clearTimer+0x68>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
            timer0_flag = 0;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <clearTimer+0x6c>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
            break;
 8001864:	e015      	b.n	8001892 <clearTimer+0x5e>
        case 1:
            timer1_counter = 0;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <clearTimer+0x70>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
            timer1_flag = 0;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <clearTimer+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
            break;
 8001872:	e00e      	b.n	8001892 <clearTimer+0x5e>
        case 2:
            timer2_counter = 0;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <clearTimer+0x78>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
            timer2_flag = 0;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <clearTimer+0x7c>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
            break;
 8001880:	e007      	b.n	8001892 <clearTimer+0x5e>
        case 3:
            timer3_counter = 0;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <clearTimer+0x80>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
            timer3_flag = 0;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <clearTimer+0x84>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
            break;
 800188e:	e000      	b.n	8001892 <clearTimer+0x5e>
        default:
            break;
 8001890:	bf00      	nop
    }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	200000a0 	.word	0x200000a0
 80018a0:	200000a4 	.word	0x200000a4
 80018a4:	200000a8 	.word	0x200000a8
 80018a8:	200000ac 	.word	0x200000ac
 80018ac:	200000b0 	.word	0x200000b0
 80018b0:	200000b4 	.word	0x200000b4
 80018b4:	200000b8 	.word	0x200000b8
 80018b8:	200000bc 	.word	0x200000bc

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_MspInit+0x5c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_MspInit+0x5c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_MspInit+0x60>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_MspInit+0x60>)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d113      	bne.n	800195a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_TIM_Base_MspInit+0x44>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_TIM_Base_MspInit+0x44>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_TIM_Base_MspInit+0x44>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	201c      	movs	r0, #28
 8001950:	f000 f9a1 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001954:	201c      	movs	r0, #28
 8001956:	f000 f9ba 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f87f 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM2_IRQHandler+0x10>)
 80019be:	f000 ffdb 	bl	8002978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200000d0 	.word	0x200000d0

080019cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d8:	f7ff fff8 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019de:	490c      	ldr	r1, [pc, #48]	; (8001a10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f4:	4c09      	ldr	r4, [pc, #36]	; (8001a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a02:	f001 faf9 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a06:	f7ff fd27 	bl	8001458 <main>
  bx lr
 8001a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a14:	08003094 	.word	0x08003094
  ldr r2, =_sbss
 8001a18:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a1c:	2000011c 	.word	0x2000011c

08001a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_2_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x28>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x28>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f923 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	200f      	movs	r0, #15
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff ff3c 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f93b 	bl	8001cea <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f903 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000004c 	.word	0x2000004c
 8001aa8:	20000054 	.word	0x20000054
 8001aac:	20000050 	.word	0x20000050

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000054 	.word	0x20000054
 8001ad0:	20000118 	.word	0x20000118

08001ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000118 	.word	0x20000118

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4906      	ldr	r1, [pc, #24]	; (8001b80 <__NVIC_EnableIRQ+0x34>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff90 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff2d 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff42 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff90 	bl	8001bd8 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5f 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff35 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	e148      	b.n	8001faa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8137 	bne.w	8001fa4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4aa3      	ldr	r2, [pc, #652]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d05e      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d40:	4aa1      	ldr	r2, [pc, #644]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d875      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d46:	4aa1      	ldr	r2, [pc, #644]	; (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d058      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d4c:	4a9f      	ldr	r2, [pc, #636]	; (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d86f      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d52:	4a9f      	ldr	r2, [pc, #636]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d052      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d58:	4a9d      	ldr	r2, [pc, #628]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d869      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a9d      	ldr	r2, [pc, #628]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04c      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d64:	4a9b      	ldr	r2, [pc, #620]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d863      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d6a:	4a9b      	ldr	r2, [pc, #620]	; (8001fd8 <HAL_GPIO_Init+0x2d4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d046      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d70:	4a99      	ldr	r2, [pc, #612]	; (8001fd8 <HAL_GPIO_Init+0x2d4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d85d      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d82a      	bhi.n	8001dd0 <HAL_GPIO_Init+0xcc>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d859      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <HAL_GPIO_Init+0x80>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001dff 	.word	0x08001dff
 8001d88:	08001dd9 	.word	0x08001dd9
 8001d8c:	08001deb 	.word	0x08001deb
 8001d90:	08001e2d 	.word	0x08001e2d
 8001d94:	08001e33 	.word	0x08001e33
 8001d98:	08001e33 	.word	0x08001e33
 8001d9c:	08001e33 	.word	0x08001e33
 8001da0:	08001e33 	.word	0x08001e33
 8001da4:	08001e33 	.word	0x08001e33
 8001da8:	08001e33 	.word	0x08001e33
 8001dac:	08001e33 	.word	0x08001e33
 8001db0:	08001e33 	.word	0x08001e33
 8001db4:	08001e33 	.word	0x08001e33
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e33 	.word	0x08001e33
 8001dc0:	08001e33 	.word	0x08001e33
 8001dc4:	08001e33 	.word	0x08001e33
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001df5 	.word	0x08001df5
 8001dd0:	4a82      	ldr	r2, [pc, #520]	; (8001fdc <HAL_GPIO_Init+0x2d8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dd6:	e02c      	b.n	8001e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e029      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e024      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	3308      	adds	r3, #8
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e01f      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e01a      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e06:	2304      	movs	r3, #4
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e013      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	611a      	str	r2, [r3, #16]
          break;
 8001e1e:	e009      	b.n	8001e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	615a      	str	r2, [r3, #20]
          break;
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          break;
 8001e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d801      	bhi.n	8001e3e <HAL_GPIO_Init+0x13a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_Init+0x13e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d802      	bhi.n	8001e50 <HAL_GPIO_Init+0x14c>
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x152>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3b08      	subs	r3, #8
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	6a39      	ldr	r1, [r7, #32]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8090 	beq.w	8001fa4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e84:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a49      	ldr	r2, [pc, #292]	; (8001fe8 <HAL_GPIO_Init+0x2e4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a48      	ldr	r2, [pc, #288]	; (8001fec <HAL_GPIO_Init+0x2e8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a47      	ldr	r2, [pc, #284]	; (8001ff0 <HAL_GPIO_Init+0x2ec>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1d8>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001edc:	2303      	movs	r3, #3
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef6:	493b      	ldr	r1, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4937      	ldr	r1, [pc, #220]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4933      	ldr	r1, [pc, #204]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	492d      	ldr	r1, [pc, #180]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4923      	ldr	r1, [pc, #140]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	491f      	ldr	r1, [pc, #124]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4919      	ldr	r1, [pc, #100]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4915      	ldr	r1, [pc, #84]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f aeaf 	bne.w	8001d18 <HAL_GPIO_Init+0x14>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	372c      	adds	r7, #44	; 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	10320000 	.word	0x10320000
 8001fcc:	10310000 	.word	0x10310000
 8001fd0:	10220000 	.word	0x10220000
 8001fd4:	10210000 	.word	0x10210000
 8001fd8:	10120000 	.word	0x10120000
 8001fdc:	10110000 	.word	0x10110000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40010c00 	.word	0x40010c00
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002042:	e003      	b.n	800204c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	041a      	lsls	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43d9      	mvns	r1, r3
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e26c      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d00c      	beq.n	80020ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b4:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d112      	bne.n	80020e6 <HAL_RCC_OscConfig+0x5e>
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d10b      	bne.n	80020e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d06c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x12c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d168      	bne.n	80021b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e246      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x76>
 80020f0:	4b80      	ldr	r3, [pc, #512]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a7f      	ldr	r2, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e02e      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7a      	ldr	r2, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b78      	ldr	r3, [pc, #480]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a77      	ldr	r2, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0xbc>
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a71      	ldr	r2, [pc, #452]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 8002144:	4b6b      	ldr	r3, [pc, #428]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6a      	ldr	r2, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a67      	ldr	r2, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fcb6 	bl	8001ad4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fcb2 	bl	8001ad4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1fa      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xe4>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fca2 	bl	8001ad4 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fc9e 	bl	8001ad4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1e6      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x10c>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c2:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ce:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x18c>
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x176>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1ba      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4939      	ldr	r1, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x270>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fc57 	bl	8001ad4 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fc53 	bl	8001ad4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e19b      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x270>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fc36 	bl	8001ad4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff fc32 	bl	8001ad4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e17a      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03a      	beq.n	800230c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d019      	beq.n	80022d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_RCC_OscConfig+0x274>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff fc16 	bl	8001ad4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff fc12 	bl	8001ad4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e15a      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 fa9a 	bl	8002804 <RCC_Delay>
 80022d0:	e01c      	b.n	800230c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x274>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fbfc 	bl	8001ad4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022de:	e00f      	b.n	8002300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fbf8 	bl	8001ad4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d908      	bls.n	8002300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e140      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	42420000 	.word	0x42420000
 80022fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e9      	bne.n	80022e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a6 	beq.w	8002466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b97      	ldr	r3, [pc, #604]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b94      	ldr	r3, [pc, #592]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a93      	ldr	r2, [pc, #588]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b91      	ldr	r3, [pc, #580]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a8a      	ldr	r2, [pc, #552]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7ff fbb9 	bl	8001ad4 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7ff fbb5 	bl	8001ad4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0fd      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x312>
 800238c:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e02d      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	e01c      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x356>
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a66      	ldr	r2, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b64      	ldr	r3, [pc, #400]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a63      	ldr	r2, [pc, #396]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fb69 	bl	8001ad4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff fb65 	bl	8001ad4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0ab      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ee      	beq.n	8002406 <HAL_RCC_OscConfig+0x37e>
 8002428:	e014      	b.n	8002454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7ff fb53 	bl	8001ad4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff fb4f 	bl	8001ad4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e095      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ee      	bne.n	8002432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b48      	ldr	r3, [pc, #288]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8081 	beq.w	8002572 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d061      	beq.n	8002540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d146      	bne.n	8002512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff fb23 	bl	8001ad4 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff fb1f 	bl	8001ad4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e067      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	492d      	ldr	r1, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a19      	ldr	r1, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	430b      	orrs	r3, r1
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff faf3 	bl	8001ad4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7ff faef 	bl	8001ad4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e037      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x46a>
 8002510:	e02f      	b.n	8002572 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fadc 	bl	8001ad4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff fad8 	bl	8001ad4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e020      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x498>
 800253e:	e018      	b.n	8002572 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e013      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	42420060 	.word	0x42420060

08002588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d0      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b67      	ldr	r3, [pc, #412]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4965      	ldr	r1, [pc, #404]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d040      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e073      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e06b      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4936      	ldr	r1, [pc, #216]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7ff fa2c 	bl	8001ad4 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7ff fa28 	bl	8001ad4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e053      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4922      	ldr	r1, [pc, #136]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f821 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	490a      	ldr	r1, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	5ccb      	ldrb	r3, [r1, r3]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1cc>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f98a 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	08003068 	.word	0x08003068
 8002754:	2000004c 	.word	0x2000004c
 8002758:	20000050 	.word	0x20000050

0800275c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x30>
 8002786:	2b08      	cmp	r3, #8
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x36>
 800278a:	e027      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800278e:	613b      	str	r3, [r7, #16]
      break;
 8002790:	e027      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0c9b      	lsrs	r3, r3, #18
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c5b      	lsrs	r3, r3, #17
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027be:	fb02 f203 	mul.w	r2, r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e004      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	613b      	str	r3, [r7, #16]
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	693b      	ldr	r3, [r7, #16]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	08003078 	.word	0x08003078
 80027fc:	08003088 	.word	0x08003088
 8002800:	003d0900 	.word	0x003d0900

08002804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCC_Delay+0x34>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <RCC_Delay+0x38>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002820:	bf00      	nop
  }
  while (Delay --);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <RCC_Delay+0x1c>
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	2000004c 	.word	0x2000004c
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e041      	b.n	80028d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff f85a 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 fa56 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d001      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e035      	b.n	8002964 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_TIM_Base_Start_IT+0x90>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x4e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d004      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x4e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_TIM_Base_Start_IT+0x94>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d010      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002950:	e007      	b.n	8002962 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400

08002978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d020      	beq.n	80029dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0202 	mvn.w	r2, #2
 80029ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f998 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f98b 	bl	8002ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f99a 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0204 	mvn.w	r2, #4
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f972 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f965 	bl	8002ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f974 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0208 	mvn.w	r2, #8
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f94c 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f93f 	bl	8002ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f94e 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f926 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f919 	bl	8002ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f928 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0201 	mvn.w	r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fdd8 	bl	8001694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa6f 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8f8 	bl	8002d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0220 	mvn.w	r2, #32
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa42 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0b4      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x186>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bac:	d03e      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0xd4>
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	f200 8087 	bhi.w	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	f000 8086 	beq.w	8002cca <HAL_TIM_ConfigClockSource+0x172>
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	d87f      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d01a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xa6>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d87b      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d050      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x11a>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d877      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d03c      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0xfa>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d873      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d058      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x13a>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d86f      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d064      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d86b      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d060      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d867      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05c      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d05a      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	e062      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f000 f96a 	bl	8002ee6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
      break;
 8002c2a:	e04f      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f000 f953 	bl	8002ee6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4e:	609a      	str	r2, [r3, #8]
      break;
 8002c50:	e03c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 f8ca 	bl	8002df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2150      	movs	r1, #80	; 0x50
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f921 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002c70:	e02c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 f8e8 	bl	8002e54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2160      	movs	r1, #96	; 0x60
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f911 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002c90:	e01c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 f8aa 	bl	8002df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f901 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e00c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f000 f8f8 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002cc2:	e003      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
	...

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x28>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x28>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <TIM_Base_SetConfig+0xc4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0x52>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0x52>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <TIM_Base_SetConfig+0xc4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]
  }
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400

08002df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 030a 	bic.w	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0210 	bic.w	r2, r3, #16
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	031b      	lsls	r3, r3, #12
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f043 0307 	orr.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	609a      	str	r2, [r3, #8]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e041      	b.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d004      	beq.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10c      	bne.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	4d0c      	ldr	r5, [pc, #48]	; (8003030 <__libc_init_array+0x38>)
 8002ffe:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	f000 f822 	bl	8003050 <_init>
 800300c:	2600      	movs	r6, #0
 800300e:	4d0a      	ldr	r5, [pc, #40]	; (8003038 <__libc_init_array+0x40>)
 8003010:	4c0a      	ldr	r4, [pc, #40]	; (800303c <__libc_init_array+0x44>)
 8003012:	1b64      	subs	r4, r4, r5
 8003014:	10a4      	asrs	r4, r4, #2
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	0800308c 	.word	0x0800308c
 8003034:	0800308c 	.word	0x0800308c
 8003038:	0800308c 	.word	0x0800308c
 800303c:	08003090 	.word	0x08003090

08003040 <memset>:
 8003040:	4603      	mov	r3, r0
 8003042:	4402      	add	r2, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
